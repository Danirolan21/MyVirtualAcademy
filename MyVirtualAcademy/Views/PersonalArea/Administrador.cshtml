@model List<VistaCursosDetalles>

@section Styles {
    <style>

        :root {
            --primary: #3498db;
            --primary-dark: #2980b9;
            --primary-hover: #2196f3;
            --secondary: #2ecc71;
            --secondary-dark: #27ae60;
            --success: #4caf50;
            --gray-light: #f5f7fa;
            --gray: #e0e0e0;
            --gray-dark: #95a5a6;
            --dark: #34495e;
            --danger: #e74c3c;
            --warning: #f39c12;
            --black: #000000;
            --light: #f8f8f8;
            --text-muted: #6c757d;
            --border-radius: 12px;
            --box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        main {
            padding: 1.5rem 0;
        }

        /* Tab Navigation */
        .tabs {
            display: flex;
            border-bottom: 2px solid var(--border-color);
            margin-bottom: 1.5rem;
        }

        .tab {
            padding: 0.75rem 1.25rem;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            border-bottom: 2px solid transparent;
            margin-bottom: -2px;
        }

        .tab.active {
            color: var(--black);
            border-bottom-color: var(--black);
        }

        .tab:hover:not(.active) {
            color: var(--primary-hover);
            background-color: rgba(37, 99, 235, 0.05);
        }

        /* Course Cards */
        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .course-card {
            background-color: white;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            height: 100%;
        }

        .course-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .course-image {
            height: 160px;
            background-color: #93c5fd;
            background-size: cover;
            background-position: center;
            position: relative;
        }

        .course-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            color: white;
        }

        .status-active {
            background-color: var(--secondary);
        }

        .status-draft {
            background-color: var(--gray-dark);
        }

        .status-complete {
            background-color: var(--primary);
        }

        .status-archived {
            background-color: var(--gray);
        }

        .status-suspended {
            background-color: var(--danger);
        }

        .course-content {
            padding: 1.25rem;
        }

        .course-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .course-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--black);
            font-size: 0.875rem;
            margin-bottom: 0.75rem;
        }

        /* Button Styles */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            gap: 0.5rem;
        }

        .btn-primary {
            background-color: var(--primary-hover);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary);
        }

        .create-course-btn {
            background-color: #fff;
            border: 1px solid #ccc;
            color: #333;
            font-weight: 500;
        }

        .create-course-btn:hover {
            background-color: var(--light);
        }

        .course-actions {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
        }
    
        .btn-options {
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border: none;
            transition: background-color 0.2s;
        }
    
        .btn-options:hover {
            background-color: rgba(255, 255, 255, 1);
        }

        .course-content-container {
            background-color: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
            margin-top: 20px;
            transition: var(--transition);
        }
        
        .add-content-container {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #f8f9fa;
            border-radius: var(--border-radius);
            margin: 20px 0;
        }
        
        .add-content-text {
            color: var(--gray-color);
            margin-bottom: 15px;
            text-align: center;
        }
    </style>
}

<main class="container">
    <div id="courseListView">
        <div class="tabs justify-content-between">
            <div class="tab active">Cursos</div>
            <div class="ml-auto">
                <a class="btn btn-primary text-dark"
                   asp-controller="PersonalArea"
                   asp-action="CrearCurso">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="12" y1="5" x2="12" y2="19"></line>
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                    </svg>
                    Crear Nuevo Curso
                </a>
            </div>
        </div>

        @if (Model.Count() != 0){
            <div class="courses-grid">
                @foreach (VistaCursosDetalles curso in Model)
                {
                    <div class="course-card">
                        <a class="text-dark"
                            asp-controller="PersonalArea"
                            asp-action="DetallesCurso"
                            asp-route-idCurso="@curso.IdCurso">
                            <div class="course-image" style="background-image: url('/assets/images/courses/@curso.ImagenPortada');">
                                <span class="course-status
                                        @(curso.Estado == "Activo" ? "status-active" :
                                        curso.Estado == "Borrador" ? "status-draft" :
                                        curso.Estado == "Finalizado" ? "status-complete" :
                                        curso.Estado == "Archivado" ? "status-archived" :
                                        curso.Estado == "Suspendido" ? "status-suspended" : "")">
                                    @curso.Estado
                                </span>
            
                                <div class="course-actions">
                                    <button type="button" 
                                            class="btn-options" 
                                            onclick="event.preventDefault(); mostrarOpcionesCurso(@curso.IdCurso, '@curso.NombreCurso')">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <circle cx="12" cy="12" r="1"></circle>
                                            <circle cx="12" cy="5" r="1"></circle>
                                            <circle cx="12" cy="19" r="1"></circle>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            <div class="course-content">
                                <h3 class="course-title">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#ff6b6b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                    </svg>
                                    @curso.NombreCurso
                                </h3>

                                <div class="course-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                        <circle cx="12" cy="7" r="4"></circle>
                                    </svg>
                                    @curso.NombreProfesor
                                </div>

                                <div class="course-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                        <line x1="16" y1="2" x2="16" y2="6"></line>
                                        <line x1="8" y1="2" x2="8" y2="6"></line>
                                        <line x1="3" y1="10" x2="21" y2="10"></line>
                                    </svg>
                                    Inicio: @curso.FechaInicio.ToString("dd/MM/yyyy")
                                </div>

                                <div class="course-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M12 20h9"></path>
                                        <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                                    </svg>
                                    Asignaturas: @curso.NumeroAsignaturas
                                </div>

                                <div class="course-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                                        <circle cx="9" cy="7" r="4"></circle>
                                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                                    </svg>
                                    Alumnos: @curso.NumeroAlumnos
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        }
        else {
            <div class="course-content-container">
                <div class="add-content-container">
                    <p class="add-content-text">Aún no hay curso creados.</p>
                </div>
            </div>
        }
    </div>
</main>

@section Scripts {
    <script>
        function mostrarOpcionesCurso(idCurso, nombreCurso) {
            Swal.fire({
                title: 'Opciones',
                html: `¿Qué deseas hacer con el curso <strong>${nombreCurso}</strong>?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3498db',
                cancelButtonColor: '#e74c3c',
                confirmButtonText: 'Editar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Cargar formulario de edición mediante Ajax
                    cargarFormularioEdicion(idCurso);
                }
            });
        }

        // Función para cargar el formulario de edición con SweetAlert2
        function cargarFormularioEdicion(idCurso) {
            // Realizar petición Ajax para obtener datos del curso
            fetch(`/PersonalArea/ObtenerDatosCurso?idCurso=${idCurso}`)
                .then(response => response.json())
                .then(data => {
                    // Construir formulario HTML
                    Swal.fire({
                        title: 'Editar Curso',
                        html: `
                            <form id="formEditarCurso" class="text-left">
                                <input type="hidden" id="idCurso" value="${idCurso}">
        
                                <div class="mb-3">
                                    <label for="nombre" class="form-label">Nombre</label>
                                    <input type="text" class="form-control" id="nombre" value="${data.nombreCurso}" required>
                                </div>
        
                                <div class="mb-3">
                                    <label for="descripcion" class="form-label">Descripción</label>
                                    <textarea class="form-control" id="descripcion">${data.descripcion || ''}</textarea>
                                </div>
        
                                <div class="mb-3">
                                    <label for="idProfesor" class="form-label">Profesor</label>
                                    <select class="form-control" id="idProfesor" required>
                                        ${data.profesores.map(p => `
                                            <option value="${p.idUsuario}" ${p.idUsuario === data.idProfesor ? 'selected' : ''}>
                                                ${p.nombre} ${p.apellidos}
                                            </option>
                                        `).join('')}
                                    </select>
                                </div>
        
                                <div class="mb-3">
                                    <label for="idSuplente" class="form-label">Profesor Suplente (Opcional)</label>
                                    <select class="form-control" id="idSuplente">
                                        <option value="">-- Sin suplente --</option>
                                        ${data.profesores.map(p => `
                                            <option value="${p.idUsuario}" ${p.idUsuario === data.idSuplente ? 'selected' : ''}>
                                                ${p.nombre} ${p.apellidos}
                                            </option>
                                        `).join('')}
                                    </select>
                                </div>
        
                                <div class="mb-3">
                                    <label for="fechaInicio" class="form-label">Fecha Inicio</label>
                                    <input type="date" class="form-control" id="fechaInicio" value="${formatDateForInput(data.fechaInicio)}" required>
                                </div>
        
                                <div class="mb-3">
                                    <label for="fechaFin" class="form-label">Fecha Fin</label>
                                    <input type="date" class="form-control" id="fechaFin" value="${formatDateForInput(data.fechaFin)}" required>
                                </div>
        
                                <div class="mb-3">
                                    <label for="estado" class="form-label">Estado</label>
                                    <select class="form-control" id="estado" required>
                                        ${['Borrador', 'Activo', 'Finalizado', 'Archivado', 'Suspendido'].map(e => `
                                            <option value="${e}" ${e === data.estado ? 'selected' : ''}>${e}</option>
                                        `).join('')}
                                    </select>
                                </div>
        
                                <div class="mb-3">
                                    <label for="imagenPortada" class="form-label">Imagen Portada</label>
                                    <input type="file" class="form-control" id="imagenPortada">
                                    <small class="form-text text-muted">Deja vacío para mantener la imagen actual</small>
                                </div>
                            </form>
                        `,
                        showCancelButton: true,
                        confirmButtonText: 'Guardar',
                        cancelButtonText: 'Cancelar',
                        width: '600px',
                        preConfirm: () => {
                            return guardarEdicionCurso();
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: '¡Curso actualizado!',
                                text: 'Los cambios se han guardado correctamente',
                                icon: 'success'
                            }).then(() => {
                                // Recargar la página para ver los cambios
                                window.location.reload();
                            });
                        }
                    });
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Error', 'No se pudieron cargar los datos del curso', 'error');
                });
        }

        // Función para formatear fecha para input date
        function formatDateForInput(dateString) {
            const date = new Date(dateString);
            return date.toISOString().split('T')[0];
        }

        // Función para guardar la edición del curso
        function guardarEdicionCurso() {
            const formData = new FormData();

            formData.append('idCurso', document.getElementById('idCurso').value);
            formData.append('nombre', document.getElementById('nombre').value);
            formData.append('descripcion', document.getElementById('descripcion').value);
            formData.append('idProfesor', document.getElementById('idProfesor').value);
            formData.append('idSuplente', document.getElementById('idSuplente').value);
            formData.append('fechaInicio', document.getElementById('fechaInicio').value);
            formData.append('fechaFin', document.getElementById('fechaFin').value);
            formData.append('estado', document.getElementById('estado').value);

            const imagenInput = document.getElementById('imagenPortada');
            if (imagenInput.files.length > 0) {
                formData.append('imagenPortada', imagenInput.files[0]);
            }

            return fetch('/PersonalArea/EditarCurso', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al guardar el curso');
                }
                return response.json();
            })
            .catch(error => {
                Swal.showValidationMessage(`Error: ${error.message}`);
            });
        }
    </script>
}