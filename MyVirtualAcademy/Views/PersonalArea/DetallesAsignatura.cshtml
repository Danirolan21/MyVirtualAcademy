@model AsignaturaDetalleViewModel

@section Styles {
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --success-color: #4cc9f0;
            --accent-color: #f72585;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --gray-color: #6c757d;
            --border-radius: 12px;
            --box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f0f2f5;
            color: var(--dark-color);
            margin: 0;
            padding: 0;
        }

        .main-container {
            display: flex;
            width: 100%;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
            background-color: white;
            margin: 20px auto;
            max-width: 1400px;
        }

        .left-sidebar {
            width: 280px;
            background-color: #fff;
            border-right: 1px solid #e0e0e0;
            height: calc(100vh - 40px);
            overflow-y: auto;
            border-top-left-radius: var(--border-radius);
            border-bottom-left-radius: var(--border-radius);
        }

        .theme-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
            font-weight: 600;
            color: var(--dark-color);
            cursor: pointer;
            transition: var(--transition);
        }

            .theme-header:hover {
                background-color: #f5f7fb;
            }

            .theme-header .toggle-icon {
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                background-color: #f0f2f5;
                color: var(--primary-color);
                font-size: 14px;
            }

        .theme-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease-in-out;
            background-color: #fafafa;
        }

            .theme-content.open {
                max-height: 500px;
            }

        .theme-item {
            padding: 12px 20px 12px 40px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            color: var(--gray-color);
            transition: var(--transition);
            position: relative;
            font-size: 14px;
        }

            .theme-item:hover {
                background-color: #f5f7fb;
                color: var(--primary-color);
            }

            .theme-item.active {
                background-color: #e8f0fe;
                color: var(--primary-color);
                font-weight: 500;
            }

                .theme-item.active::before {
                    content: "";
                    position: absolute;
                    left: 0;
                    top: 0;
                    height: 100%;
                    width: 4px;
                    background-color: var(--primary-color);
                }

        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
            height: calc(100vh - 40px);
            border-top-right-radius: var(--border-radius);
            border-bottom-right-radius: var(--border-radius);
        }

        .subject-header {
            margin-bottom: 30px;
            position: relative;
            background: linear-gradient(135deg, #e0f7fa, #bbdefb);
            border-radius: var(--border-radius);
            padding: 30px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

            .subject-header::before {
                content: '';
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                background: url('/api/placeholder/400/200') center/cover no-repeat;
                opacity: 0.1;
                border-radius: var(--border-radius);
            }

        .subject-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 15px;
            color: var(--dark-color);
            letter-spacing: -0.5px;
            position: relative;
        }

        .teachers-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }

        .teacher-info {
            display: flex;
            align-items: center;
            background-color: white;
            padding: 6px 12px;
            border-radius: 30px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            width: fit-content;
            font-size: 14px;
        }

        .teacher-avatar {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 8px;
            background-color: var(--primary-color);
            color: white;
            font-weight: 600;
            font-size: 12px;
        }

        .teacher-avatar img {
                width: 100%;
                border-radius: 50%;
        }

        .teacher-name {
            font-weight: 500;
            color: var(--dark-color);
        }

        .theme-content-container {
            background-color: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
            margin-top: 20px;
            transition: var(--transition);
        }

        .theme-content-container:hover {
            transform: translateY(-5px);
        }

        .theme-title {
            font-size: 1.5rem;
            padding: 20px 25px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
            font-weight: 600;
            color: var(--dark-color);
        }

        .content-item {
            display: flex;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid #eee;
            transition: var(--transition);
        }

            .content-item:hover {
                background-color: #f9f9f9;
            }

            .content-item:last-child {
                border-bottom: none;
            }

        .content-icon {
            margin-right: 20px;
            font-size: 1.2rem;
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #e8f0fe;
            color: var(--primary-color);
        }

        .theory-icon {
            background-color: #e8f0fe;
            color: var(--primary-color);
        }

        .practice-icon {
            background-color: #fdf2f8;
            color: var(--accent-color);
        }

        .quiz-icon {
            background-color: #ecfdf5;
            color: #10b981;
        }

        .content-info {
            flex: 1;
        }

        .content-title {
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 4px;
            color: var(--dark-color);
        }

        .content-description {
            font-size: 14px;
            color: var(--gray-color);
            max-width: 80%;
        }

        .status-button {
            padding: 8px 20px;
            border-radius: 30px;
            color: white;
            border: none;
            cursor: pointer;
            font-weight: 500;
            font-size: 14px;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .status-done {
            background-color: #10b981;
        }

            .status-done:hover {
                background-color: #059669;
            }

        .status-not-done {
            background-color: #6b7280;
        }

            .status-not-done:hover {
                background-color: #4b5563;
            }

        /* Pattern decorativo para el header */
        .pattern-bg {
            position: absolute;
            top: 0;
            right: 0;
            width: 40%;
            height: 100%;
            background-image: radial-gradient(circle at 15% 50%, rgba(255,255,255,0.2) 6px, transparent 6px), radial-gradient(circle at 35% 70%, rgba(255,255,255,0.2) 10px, transparent 10px), radial-gradient(circle at 55% 30%, rgba(255,255,255,0.2) 8px, transparent 8px), radial-gradient(circle at 75% 60%, rgba(255,255,255,0.2) 12px, transparent 12px);
            background-size: 150px 150px;
            z-index: 0;
        }

        /* Estilos para la barra de desplazamiento */
        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 10px;
        }

            ::-webkit-scrollbar-thumb:hover {
                background: #a1a1a1;
            }

        /* Estilo para el scroll suave */
        * {
            scroll-behavior: smooth;
        }

        /* Animaciones */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .main-content > * {
            animation: fadeIn 0.5s ease forwards;
        }

        /* Pills de información en el header */
        .subject-info-pills {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            position: relative;
        }

        .info-pill {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: 500;
            background-color: rgba(255, 255, 255, 0.5);
            backdrop-filter: blur(5px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .add-button-gradient {
            width: 100%;
            padding: 12px 16px;
            background-image: linear-gradient(to right, #4361ee, #3f37c9);
            color: white;
            font-weight: 500;
            border-radius: var(--border-radius);
            border: none;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            cursor: pointer;
            margin: 15px 0;
        }
        
        .add-button-gradient:hover {
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }
        
        .add-button-card {
            width: 100%;
            padding: 16px;
            background-color: white;
            border: 2px dashed #4361ee;
            border-radius: var(--border-radius);
            color: #4361ee;
            font-weight: 500;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            cursor: pointer;
            margin: 15px 0;
        }
        
        .add-button-card:hover {
            background-color: rgba(67, 97, 238, 0.05);
        }
        
        .add-content-container {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #f8f9fa;
            border-radius: var(--border-radius);
            margin: 20px 0;
        }
        
        .add-content-text {
            color: var(--gray-color);
            margin-bottom: 15px;
            text-align: center;
        }

        .add-content-form {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-top: 1rem;
            margin-bottom: 1rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .form-container {
            margin-top: 1rem;
        }
    </style>
    <style>
    /* Estilos Modal SweetAlert2 */
    .my-swal .swal2-title {
        color: #4361ee;
        font-size: 1.8rem;
        font-weight: 600;
    }

    .my-swal .swal2-html-container {
        text-align: left;
    }

    .my-swal .swal2-popup {
        padding: 2em;
        border-radius: 15px;
        background: linear-gradient(to bottom right, #ffffff, #f8f9fa);
        border-top: 3px solid #4361ee;
    }

    .my-swal .swal2-confirm {
        background-image: linear-gradient(to right, #4361ee, #3a57e8);
        border-radius: 30px;
        padding: 10px 25px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .my-swal .swal2-confirm:hover {
        background-image: linear-gradient(to right, #3a57e8, #324bd9);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }

    .my-swal .swal2-cancel {
        border-radius: 30px;
        padding: 10px 25px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .my-swal .swal2-cancel:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
    }

    .my-swal input, 
    .my-swal select, 
    .my-swal textarea {
        border-radius: 10px;
        padding: 12px 15px;
        margin-bottom: 15px;
        transition: all 0.3s ease;
        border: 1px solid #e0e0e0;
    }

    .my-swal input:focus, 
    .my-swal select:focus, 
    .my-swal textarea:focus {
        border-color: #4361ee;
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    }

    /* Animación para el modal */
    .my-swal .swal2-show {
        animation: modal-show 0.5s;
    }

    @@keyframes modal-show {
        0% {
            transform: scale(0.9);
            opacity: 0;
        }
        100% {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>
}

<div class="main-container">
    <input type="hidden" id="idAsignatura" value="@Model.IdAsignatura" />
    <!-- Sidebar izquierdo (menú) -->
    <div class="left-sidebar">
        @if(Context.User.IsInRole("Administrador") == true){
            @if (ViewData["IdCurso"] != null)
            {
                <a asp-controller="PersonalArea" asp-action="DetallesCurso" asp-route-idCurso="@ViewData["IDCURSO"]"
                   class="d-inline-flex align-items-center m-4 mb-4 text-decoration-none text-dark fw-bold fw-500">
                    <img src="~/assets/iconos/back.png" width="30" height="30" class="me-2" /> Volver al curso
                </a>
            }
        }
        else
        {
            <a href="javascript:history.back()"
               class="d-inline-flex align-items-center m-4 mb-4 text-decoration-none text-dark fw-bold fw-500">
                <img src="~/assets/iconos/back.png" width="30" height="30" class="me-2" /> Volver al curso
            </a>
        }
        @if(Model.Temas != null && Model.Temas.Any()){
            @foreach(TemaViewModel tema in Model.Temas){
                <div class="theme-header">
                    <span>@tema.NombreTema</span>
                    <div class="toggle-icon">-</div>
                </div>
                @if(tema.Contenidos != null){
                    <div class="theme-content open">
                        <div class="theme-item active">
                            <img src="~/assets/iconos/table-cells-large-solid.svg" class="me-2" width="15" height="15" /> Todo
                        </div>
                        @foreach (ContenidoViewModel contenido in @tema.Contenidos)
                        {
                            <div class="theme-item">
                                @switch (contenido.TipoContenido)
                                {
                                    case "Video":
                                        <img src="~/assets/iconos/video-solid.svg" class="me-2" width="15" height="15" />
                                        break;
                                    case "Documento":
                                        <img src="~/assets/iconos/book-solid.svg" class="me-2" width="15" height="15" />
                                        break;
                                    case "Enlace":
                                        <img src="~/assets/iconos/link-solid.svg" class="me-2" width="15" height="15" />
                                        break;
                                    case "Tarea":
                                        <img src="~/assets/iconos/laptop-code-solid.svg" class="me-2" width="15" height="15" />
                                        break;
                                    case "Quiz":
                                    case "Examen":
                                        <img src="~/assets/iconos/circle-question-solid.svg" class="me-2" width="15" height="15" />
                                        break;
                                    default:
                                        <img src="~/assets/iconos/book-solid.svg" class="me-2" width="15" height="15" />
                                        break;
                                } @contenido.TituloContenido
                            </div>
                        }
                    </div>
                }
            }

            <div class="p-3 mt-3">
                <button class="add-button-gradient btn-sm">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    <span>Añadir nuevo tema</span>
                </button>
            </div>
        }
        else{
            <div class="add-content-container bg-transparent">
                <button class="add-button-gradient">
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    <span>Añadir nuevo tema</span>
                </button>
            </div>
        }
    </div>

    <!-- Contenido principal -->
    <div class="main-content">
        <div class="subject-header">
            <div class="pattern-bg"></div>
            <h1 class="subject-title">@Model.NombreAsignatura</h1>
            <div class="teachers-container">
                @foreach(ProfesorViewModel profesor in Model.Profesores){
                    <div class="teacher-info">
                        <div class="teacher-avatar"><img src="/assets/images/users/@profesor.FotoPerfil" /></div>
                        <span class="teacher-name">@profesor.NombreProfesor @profesor.ApellidosProfesor</span>
                    </div>
                }
            </div>
        </div>

        @foreach(TemaViewModel tema in Model.Temas){
            <div class="theme-content-container" data-id-tema="@tema.IdTema">
                <div class="theme-title">
                    @tema.NombreTema
                </div>

                @if(tema.Contenidos != null && tema.Contenidos.Any()){
                    @foreach(ContenidoViewModel contenido in tema.Contenidos){
                        <a asp-controller="PersonalArea" asp-action="Detalle" asp-route-id="@contenido.IdContenido" class="contenido-link">
                            <div class="content-item">
                                <div class="content-icon
                                    @switch (contenido.TipoContenido)
                                    {
                                        case "Video":
                                            <text>theory-icon</text>
                                            break;
                                        case "Documento":
                                            <text>theory-icon</text>
                                            break;
                                        case "Enlace":
                                            <text>theory-icon</text>
                                            break;
                                        case "Tarea":
                                            <text>practice-icon</text>
                                            break;
                                        case "Quiz":
                                        case "Examen":
                                            <text>quiz-icon</text>
                                            break;
                                        default:
                                            <text>theory-icon</text>
                                            break;
                                    }">
                                    @switch (contenido.TipoContenido)
                                    {
                                        case "Video":
                                    <img src="~/assets/iconos/video-solid.svg" width="15" height="15" />
                                            break;
                                        case "Documento":
                                    <img src="~/assets/iconos/book-solid.svg" width="15" height="15" />
                                            break;
                                        case "Enlace":
                                    <img src="~/assets/iconos/link-solid.svg" width="15" height="15" />
                                            break;
                                        case "Tarea":
                                    <img src="~/assets/iconos/laptop-code-solid.svg" width="15" height="15" />
                                            break;
                                        case "Quiz":
                                        case "Examen":
                                    <img src="~/assets/iconos/circle-question-solid.svg" width="15" height="15" />
                                            break;
                                        default:
                                    <img src="~/assets/iconos/book-solid.svg" width="15" height="15" />
                                            break;
                                    }
                                </div>
                                <div class="content-info">
                                    <div class="content-title">@contenido.TituloContenido</div>
                                    <div class="content-description">@contenido.DescripcionContenido</div>
                                </div>
                                @if (@contenido.Contenido_Completado == true)
                                {
                                    <button class="status-button status-done">
                                        <img src="~/assets/iconos/check-solid.svg" class="me-2" width="15" height="15" /> Completado
                                    </button>
                                }
                                else
                                {
                                    <button class="status-button status-not-done">
                                        <img src="~/assets/iconos/clock-solid.svg" class="me-2" width="15" height="15" /> Pendiente
                                    </button>
                                }
                            </div>
                        </a>
                    }
                }
                <div class="add-content-container" id="addContentContainer-@tema.IdTema">
                    @if (!(tema.Contenidos != null && tema.Contenidos.Any()))
                    {
                        <p class="add-content-text">Aún no hay contenidos para este tema</p>
                    }
                    <button class="add-button-card" data-id-tema="@tema.IdTema" data-nombre-tema="@tema.NombreTema">
                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        <span>Añadir nuevo contenido</span>
                    </button>
                </div>
                <div class="form-container" id="formContainer-@tema.IdTema" style="display: none;"></div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function mostrarFormularioTema(idAsignatura, nombreAsignatura) {
            Swal.fire({
                title: `<span class="text-primary">Añadir nuevo tema</span>`,
                html: `
                    <form id="formNuevoTema" action="/PersonalArea/AñadirTema" method="POST">
                        <div class="text-left mb-4">
                            <p class="text-muted mb-3">Estás añadiendo un tema a la asignatura <strong>${nombreAsignatura}</strong></p>

                            <div class="mb-3">
                                <label for="Nombre" class="form-label fw-bold">Nombre del tema <span class="text-danger">*</span></label>
                                <input type="text" id="Nombre" name="Nombre" class="form-control" placeholder="Ej: Introducción a la programación" required>
                            </div>

                            <div class="mb-3">
                                <label for="Orden" class="form-label fw-bold">Orden <span class="text-danger">*</span></label>
                                <input type="number" id="Orden" name="Orden" class="form-control" min="1" value="1" required>
                                <small class="text-muted">Posición en la que aparecerá este tema en la lista</small>
                            </div>

                            <input type="hidden" id="IdAsignatura" name="IdAsignatura" value="${idAsignatura}">
                            <input type="hidden" id="IdTema" name="IdTema" value="0">
                        </div>
                    </form>
                `,
                showCancelButton: true,
                confirmButtonText: 'Guardar tema',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#4361ee',
                cancelButtonColor: '#6c757d',
                customClass: {
                    container: 'my-swal',
                    popup: 'rounded-3 shadow-lg',
                    header: 'border-bottom pb-2',
                    closeButton: 'btn btn-sm btn-outline-secondary',
                    content: 'p-4',
                    confirmButton: 'btn btn-lg px-4',
                    cancelButton: 'btn btn-lg px-4'
                },
                buttonsStyling: true,
                focusConfirm: false,
                showLoaderOnConfirm: true,
                backdrop: `rgba(0,0,123,0.4)`,
                preConfirm: () => {
                    const nombre = document.getElementById('Nombre').value;
                    const orden = document.getElementById('Orden').value;

                    if (!nombre) {
                        Swal.showValidationMessage('El nombre del tema es obligatorio');
                        return false;
                    }

                    if (!orden || orden < 1) {
                        Swal.showValidationMessage('El orden debe ser un número mayor a 0');
                        return false;
                    }

                    // Submit the form
                    document.getElementById('formNuevoTema').submit();
                    return true;
                },
                allowOutsideClick: () => !Swal.isLoading()
            });
        }

        // Actualizar los event listeners para los botones de añadir tema
        document.addEventListener('DOMContentLoaded', function() {
            // Obtener el ID de la asignatura y su nombre desde la página
            const idAsignatura = document.getElementById('idAsignatura')?.value;
            const nombreAsignatura = document.querySelector('.subject-title')?.textContent;

            // Si no encontramos los valores en los elementos DOM, intentamos obtenerlos del modelo
            const idAsignaturaFinal = idAsignatura || (typeof Model !== 'undefined' ? Model.IdAsignatura : '');
            const nombreAsignaturaFinal = nombreAsignatura || (typeof Model !== 'undefined' ? Model.NombreAsignatura : 'esta asignatura');

            if (!idAsignaturaFinal) {
                console.error('No se pudo obtener el ID de la asignatura');
                return;
            }

            // Asignar el evento solo a los botones con clase add-button-gradient
            const botonesAñadirTema = document.querySelectorAll('.add-button-gradient');
            botonesAñadirTema.forEach(boton => {
                boton.addEventListener('click', function(e) {
                    e.preventDefault();
                    mostrarFormularioTema(idAsignaturaFinal, nombreAsignaturaFinal);
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            // Obtener todos los temas y contenidos
            const temas = document.querySelectorAll('.theme-header');
            const contenidos = document.querySelectorAll('.theme-content');

            // Cerrar todos los temas y solo abrir el primero
            contenidos.forEach((content, index) => {
                content.classList.toggle('open', index === 0); // Solo el primero abierto
            });

            // Ajustar los iconos de los temas (solo el primero debe estar en '-')
            temas.forEach((header, index) => {
                const icon = header.querySelector('.toggle-icon');
                icon.textContent = index === 0 ? '-' : '+'; // El primero se queda en "-", los demás en "+"
            });

            // Mostrar solo el contenido del primer tema
            const contenedoresContenido = document.querySelectorAll('.theme-content-container');
            if (contenedoresContenido.length > 0) {
                contenedoresContenido.forEach((c, index) => {
                    c.style.display = index === 0 ? 'block' : 'none'; // Solo el primero visible
                });
            }

            // Manejo de clics en el menú lateral
            temas.forEach((header, index) => {
                header.addEventListener('click', function() {
                    // Alternar temas abiertos/cerrados
                    temas.forEach((h, i) => {
                        const content = h.nextElementSibling;
                        if (i === index) {
                            content.classList.toggle('open'); // Abrir/cerrar el actual
                            h.querySelector('.toggle-icon').textContent = content.classList.contains('open') ? '-' : '+';
                        } else {
                            content.classList.remove('open'); // Cerrar los otros
                            h.querySelector('.toggle-icon').textContent = '+'; 
                        }
                    });

                    // Cambiar el contenido del área principal según el tema seleccionado
                    contenedoresContenido.forEach(c => c.style.display = 'none'); // Ocultar todos
                    if (contenedoresContenido.length > index) {
                        contenedoresContenido[index].style.display = 'block'; // Mostrar el seleccionado
                    }
                });
            });

            // Manejo de selección dentro del tema (seleccionar contenido)
            document.querySelectorAll('.theme-item').forEach(item => {
                item.addEventListener('click', function() {
                    // Desactivar otros items
                    document.querySelectorAll('.theme-item').forEach(i => i.classList.remove('active'));
                    this.classList.add('active');

                    console.log(`Seleccionado: ${this.textContent.trim()}`);
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            // Seleccionar todos los botones de añadir contenido
            const botonesAnadirContenido = document.querySelectorAll('.add-button-card');
    
            // Usar delegación de eventos para manejar clics en botones actuales y futuros
            document.addEventListener('click', function(event) {
                // Verificar si el elemento clickeado es un botón de añadir contenido
                if (event.target.closest('.add-button-card')) {
                    const boton = event.target.closest('.add-button-card');
            
                    // Obtener el ID y nombre del tema
                    const idAsignatura = document.getElementById('idAsignatura')?.value;
                    const idTema = boton.getAttribute('data-id-tema');
                    const nombreTema = boton.getAttribute('data-nombre-tema');
            
                    // Encontrar el contenedor correcto para este tema específico
                    const addContainer = document.getElementById(`addContentContainer-${idTema}`);
                    const formContainer = document.getElementById(`formContainer-${idTema}`);
            
                    if (addContainer && formContainer) {
                        // Ocultar el botón de añadir
                        addContainer.style.display = 'none';
                
                        // Mostrar el contenedor del formulario
                        formContainer.style.display = 'block';
                
                        // Cargar el formulario mediante AJAX
                        fetch('/PersonalArea/GetFormularioContenido')
                            .then(response => response.text())
                            .then(html => {
                                formContainer.innerHTML = html;
                        
                                // Asignar valores a campos ocultos
                                if (formContainer.querySelector('#IdTema')) {
                                    formContainer.querySelector('#IdTema').value = idTema;
                                }
                                if (formContainer.querySelector('#IdAsignatura')) {
                                    formContainer.querySelector('#IdAsignatura').value = idAsignatura;
                                }
                        
                                // Configurar el tipo de contenido y los campos relacionados
                                const tipoSelect = formContainer.querySelector('#Tipo');
                                const camposFechaEntrega = formContainer.querySelector('#camposFechaEntrega');
                                const camposPuntuacion = formContainer.querySelector('#camposPuntuacion');
                                const camposExamenQuiz = formContainer.querySelector('#camposExamenQuiz');
                                const contenidoUrlContainer = formContainer.querySelector('#contenidoUrlContainer');
                                const contenidoFileContainer = formContainer.querySelector('#contenidoFileContainer');
                        
                                if (tipoSelect) {
                                    // Función para actualizar campos según el tipo seleccionado
                                    function actualizarCamposPorTipo() {
                                        const tipoSeleccionado = tipoSelect.value;
                                
                                        // Mostrar/ocultar campos de entrega y puntuación
                                        const esTareaExamenQuiz = ['Tarea', 'Quiz', 'Examen'].includes(tipoSeleccionado);
                                        if (camposFechaEntrega) camposFechaEntrega.classList.toggle('d-none', !esTareaExamenQuiz);
                                        if (camposPuntuacion) camposPuntuacion.classList.toggle('d-none', !esTareaExamenQuiz);
                                
                                        // Mostrar/ocultar campos específicos de examen y quiz
                                        const esExamenQuiz = ['Quiz', 'Examen'].includes(tipoSeleccionado);
                                        if (camposExamenQuiz) camposExamenQuiz.classList.toggle('d-none', !esExamenQuiz);
                                
                                        // Cambiar entre URL y archivo según tipo
                                        const esEnlace = tipoSeleccionado === 'Enlace';
                                        if (contenidoUrlContainer) contenidoUrlContainer.classList.toggle('d-none', !esEnlace);
                                        if (contenidoFileContainer) contenidoFileContainer.classList.toggle('d-none', esEnlace);
                                    }
                            
                                    // Aplicar configuración inicial
                                    actualizarCamposPorTipo();
                            
                                    // Configurar evento para detectar cambios en el tipo
                                    tipoSelect.addEventListener('change', actualizarCamposPorTipo);
                                }
                        
                                // Configurar botón de cancelar
                                const btnCancelar = formContainer.querySelector('#btnCancelarNuevoContenido');
                                if (btnCancelar) {
                                    btnCancelar.addEventListener('click', function() {
                                        formContainer.style.display = 'none';
                                        addContainer.style.display = 'block';
                                    });
                                }
                            })
                            .catch(error => console.error('Error al cargar el formulario:', error));
                    }
                }
            });
        });
    </script>
}